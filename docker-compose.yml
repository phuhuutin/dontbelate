version: '3'
services:
#  rabbitmq:
#    image: rabbitmq:latest
#    container_name: rabbitmq
#    ports:
#      - "5672:5672"  # RabbitMQ default port
#      - "15672:15672"  # RabbitMQ management console port
#    environment:
#      RABBITMQ_DEFAULT_USER: guest
#      RABBITMQ_DEFAULT_PASS: guest
#    volumes:
#      - rabbitmq_data:/var/lib/rabbitmq
#    networks:
#      - mynetwork
#  docker_mysql1:
#    image: mysql:latest
#    environment:
#      MYSQL_ROOT_PASSWORD: 123456
#      MYSQL_DATABASE: user_dbl
#
#    ports:
#      - "3307:3306"
#    volumes:
#      - docker_mysql1_data:/var/lib/mysql
#    networks:
#      - mynetwork
#  docker_mysql2:
#    image: mysql:latest
#    environment:
#      MYSQL_ROOT_PASSWORD: 123456
#      MYSQL_DATABASE: drivingroute_dbl
#
#    ports:
#      - "3308:3306"
#    volumes:
#      - docker_mysql2_data:/var/lib/mysql
#    networks:
#      - mynetwork
#
#  config-service:
#    image: dontbelate/config-service:0.0.1-SNAPSHOT
#    container_name: config-service
#    ports:
#      - "8071:8071"
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver:8761/eureka/"
#    depends_on:
#      eurekaserver:
#        condition: service_started
#    networks:
#      - mynetwork
#  eurekaserver:
#    image: dontbelate/service-registry:0.0.1-SNAPSHOT
#    container_name: eurekaserver
#
#    ports:
#      - "8761:8761"
#    networks:
#      - mynetwork
#  user-service:
#    image: dontbelate/user-service:0.0.1-SNAPSHOT
#    container_name: user-service
#    ports:
#      - "8082:8082"
#    environment:
#      CONFIG-SERVICE: http://config-service:8071/
#      SERVICE_URL_DEFAULT_ZONE: http://eurekaserver:8761/eureka/
#      SPRING_DATASOURCE_URL: jdbc:mysql://docker_mysql1:3306/user_dbl
#      MYSQL_USER: root
#      MYSQL_PASSWORD: 123456
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#
#
#    depends_on:
#      eurekaserver:
#        condition: service_started
#      config-service:
#        condition: service_started
#      docker_mysql1:
#        condition: service_started
#      rabbitmq:
#        condition: service_started
#    networks:
#      - mynetwork
#  drivingroute-service:
#    image: dontbelate/drivingroute-service:0.0.1-SNAPSHOT
#    container_name: drivingroute-service
#    ports:
#      - "8081:8081"
#    environment:
#      CONFIG-SERVICE: http://config-service:8071/
#      SERVICE_URL_DEFAULT_ZONE: http://eurekaserver:8761/eureka/
#      SPRING_DATASOURCE_URL: jdbc:mysql://docker_mysql2:3306/drivingroute_dbl
#      MYSQL_USER: root
#      MYSQL_PASSWORD: 123456
#      SPRING_JPA_HIBERNATE_DDL_AUTO: update
#    depends_on:
#      eurekaserver:
#        condition: service_started
#      docker_mysql2:
#        condition: service_started
#      config-service:
#        condition: service_started
#      rabbitmq:
#        condition: service_started
#    networks:
#      - mynetwork
#  gateway-service:
#    image: dontbelate/gateway-service:0.0.1-SNAPSHOT
#    container_name: gateway-service
#    ports:
#      - "9191:9191"
#    environment:
#      CONFIG-SERVICE: http://config-service:8071/
#      SERVICE_URL_DEFAULT_ZONE: http://eurekaserver:8761/eureka/
#    depends_on:
#      eurekaserver:
#        condition: service_started
#      config-service:
#        condition: service_started
#      rabbitmq:
#        condition: service_started
#      drivingroute-service:
#        condition: service_started
#      user-service:
#        condition: service_started
#    networks:
#      mynetwork:
  tempo:
    image: grafana/tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "9411:9411" # zipkin

  loki:
    image: grafana/loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1

  prometheus:
    image: prom/prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"

networks:
  mynetwork:
volumes:
  docker_mysql1_data:
  docker_mysql2_data:
  rabbitmq_data:


